// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/celestiaorg/celestia-node/share (interfaces: Availability)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	da "github.com/celestiaorg/celestia-app/pkg/da"
)

// MockAvailability is a mock of Availability interface.
type MockAvailability struct {
	ctrl     *gomock.Controller
	recorder *MockAvailabilityMockRecorder
}

// MockAvailabilityMockRecorder is the mock recorder for MockAvailability.
type MockAvailabilityMockRecorder struct {
	mock *MockAvailability
}

// NewMockAvailability creates a new mock instance.
func NewMockAvailability(ctrl *gomock.Controller) *MockAvailability {
	mock := &MockAvailability{ctrl: ctrl}
	mock.recorder = &MockAvailabilityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvailability) EXPECT() *MockAvailabilityMockRecorder {
	return m.recorder
}

// ProbabilityOfAvailability mocks base method.
func (m *MockAvailability) ProbabilityOfAvailability(arg0 context.Context) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProbabilityOfAvailability", arg0)
	ret0, _ := ret[0].(float64)
	return ret0
}

// ProbabilityOfAvailability indicates an expected call of ProbabilityOfAvailability.
func (mr *MockAvailabilityMockRecorder) ProbabilityOfAvailability(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProbabilityOfAvailability", reflect.TypeOf((*MockAvailability)(nil).ProbabilityOfAvailability), arg0)
}

// SharesAvailable mocks base method.
func (m *MockAvailability) SharesAvailable(arg0 context.Context, arg1 *da.DataAvailabilityHeader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SharesAvailable", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SharesAvailable indicates an expected call of SharesAvailable.
func (mr *MockAvailabilityMockRecorder) SharesAvailable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SharesAvailable", reflect.TypeOf((*MockAvailability)(nil).SharesAvailable), arg0, arg1)
}
